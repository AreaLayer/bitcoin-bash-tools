#!/usr/bin/env bash

. pbkdf2.sh

check-mnemonic()
  if [[ $# =~ ^(12|15|18|21|24)$ ]]
  then
    local word
    for word
    do grep -q "^$word$" wordlist.txt || return 1
    done
    create-mnemonic $(
      {
        echo '16o0'
	for word; do grep -n "^$word$" wordlist.txt; done |
	sed -e '{ s/^/2048*/; s/:/ 1-+ # / }'
	echo 2 $(($#*11/33))^ 0k/ p
      } |
      dc |
      { read -r; printf "%$(($#*11*32/33/4))s" $REPLY; } |
      sed 's/ /0/g'
    ) |
    grep -q " ${@: -1}$" || return 2
  else return 3;
  fi

complete -W "$(< wordlist.txt)" mnemonic-to-seed
function mnemonic-to-seed() {
  local OPTIND 
  if getopts hbpP o
  then
    shift $((OPTIND - 1))
    case "$o" in
      h) cat <<-USAGE_3
	${FUNCNAME[0]} -h
	${FUNCNAME[@]} [-p|-P] [-b] word ...
	USAGE_3
        ;;
      b) ${FUNCNAME[0]} "$@" |xxd -p -r ;;
      p)
	read -p "Passphrase: "
	BIP39_PASSPHRASE="$REPLY" ${FUNCNAME[0]} "$@"
	;;
      P)
	local passphrase
	read -p "Passphrase:" -s passphrase
	read -p "Confirm passphrase:" -s
	if [[ "$REPLY" = "$passphrase" ]]
	then BIP39_PASSPHRASE=$passphrase $FUNCNAME "$@"
	else echo "passphrase input error" >&2; return 3;
	fi
	;;
    esac
  else
    check-mnemonic "$@"
    case "$?" in
      1) echo "WARNING: unreckognized word in mnemonic." >&2 ;;&
      2) echo "WARNING: wrong mnemonic checksum."        >&2 ;;&
      3) echo "WARNING: unexpected number of words."     >&2 ;;&
      *) pbkdf2 sha512 "$*" "mnemonic$BIP39_PASSPHRASE" 2048 ;;
    esac
  fi
}

function create-mnemonic() {
  local OPTIND OPTARG o
  if getopts h o
  then
    shift $((OPTIND - 1))
    case "$o" in
      h) cat <<-USAGE
	${FUNCNAME[@]} -h
	${FUNCNAME[@]} entropy-size
	USAGE
        ;;
    esac
  elif [ ! -L wordlist.txt ]
  then
    1>&2 echo Please create a symbolic link to a wordlist file.
    1>&2 echo Name it wordlist.txt and place it in the current directory.
    return 1
  elif 
    declare -a wordlist=($(< wordlist.txt))
    (( ${#wordlist[@]} != 2048 ))
  then
    1>&2 echo unexpected number of words in wordlist file
    return 2
  elif [[ $1 =~ ^(128|160|192|224|256)$ ]]
  then $FUNCNAME $(openssl rand -hex $(($1/8)))
  elif [[ "$1" =~ ^([[:xdigit:]]{2}){16,32}$ ]]
  then
    local hexnoise="${1^^}"
    local -i ENT=${#hexnoise}*4 #bits
    if ((ENT % 32))
    then
      1>&2 echo entropy must be a multiple of 32, yet it is $ENT
      return 2
    fi
    { 
      # "A checksum is generated by taking the first <pre>ENT / 32</pre> bits
      # of its SHA256 hash"
      local -i CS=$ENT/32
      local -i MS=$(( (ENT+CS)/11 )) #bits
      #1>&2 echo $ENT $CS $MS
      echo "$MS 1- sn16doi"
      echo "$hexnoise 2 $CS^*"
      echo -n "$hexnoise" |
      xxd -r -p |
      openssl dgst -sha256 -binary |
      head -c1 |
      xxd -p -u
      echo "0k 2 8 $CS -^/+"
      echo "[800 ~r ln1-dsn0<x]dsxx Aof"
    } |
    dc |
    while read -r
    do echo ${wordlist[REPLY]}
    done |
    {
      mapfile -t
      echo "${MAPFILE[*]}"
    }
  elif (($# == 0))
  then $FUNCNAME 160
  else
    1>&2 echo parameters have insufficient entropy or wrong format
    return 4
  fi
}
