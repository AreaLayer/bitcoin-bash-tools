
function pbkdf2_hmac {
  local command_str
  printf -v command_str 'import hashlib; print(hashlib.pbkdf2_hmac("%s","%s".encode("utf-8"), "%s".encode("utf-8"), %d).hex())' "$@"
  python -c "$command_str"
}

function pbkdf2() {
  : TODO
}
function bip39() {
  if [ ! -L wordlist.txt ]
  then
    1>&2 echo Please create a symbolic link to a wordlist file.
    1>&2 echo Name it wordlist.txt and place it in the current directory.
    return 1
  elif 
    declare -a wordlist=($(< wordlist.txt))
    (( ${#wordlist[@]} != 2048 ))
  then
    1>&2 echo unexpected number of words in wordlist file
    return 2
  elif [[ $1 =~ ^(128|160|192|224|256)$ ]]
  then
    $FUNCNAME $(openssl rand -hex $(($1/8)))
  elif [[ "$1" =~ ^[[:xdigit:]]{2}{16,32}$ ]]
  then
    local hexnoise="${1^^}"
    local -i ENT=${#hexnoise}*4 #bits
    if ((ENT % 32))
    then
      1>&2 echo entropy must be a multiple of 32, yet it is $ENT
      return 2
    fi
    { 
      # "A checksum is generated by taking the first <pre>ENT / 32</pre> bits
      # of its SHA256 hash"
      local -i CS=$ENT/32
      local -i MS=$(( (ENT+CS)/11 )) #bits
      #1>&2 echo $ENT $CS $MS
      echo "$MS 1- sn16doi"
      echo "$hexnoise 2 $CS^*"
      echo -n "$hexnoise" |
      xxd -r -p |
      openssl dgst -sha256 -binary |
      head -c1 |
      xxd -p -u
      echo "0k 2 8 $CS -^/+"
      echo "[800 ~r ln1-dsn0<x]dsxx Aof"
    } |
    dc |
    while read
    do echo ${wordlist[REPLY]}
    done |
    paste -sd ' '
  elif [[ $# =~ ^(12|15|18|21|24)$ ]]
  then 
    {
      echo 16o0
      for word in $@
      do
        grep -n "^$word$" wordlist.txt |
        cut -d: -f1 |
        sed "{ s/^/2048*/; s/$/ 1-+ # $word/ }"
      done
      echo 2 $(($#*11/33))^ 0k/ f
    } |
    dc |
    {
      read
       $FUNCNAME $(
         printf "%$(($#*11*32/33/4))s" $REPLY |
         sed 's/ /0/g'
       ) || 1>&2 echo "undocumented error"
    } |
    tail -n 1 |
    if read -a words
    [[ "${words[@]: -1}" != "${@: -1}" ]]
    then
      1>&2 echo "wrong checksum : $REPLY instead of ${@: -1}"
      return 5
    fi
    local passphrase
    read -p 'passphrase: ' passphrase
    pbkdf2_hmac sha512 "$*" "mnemonic$passphrase" 2048
  elif (($# == 0))
  then $FUNCNAME 160
  else
    1>&2 echo parameters have insufficient entropy or wrong format
    return 4
  fi
}
